<?php

/**
 * @file
 * This module integrates the Cloud Zoom JQuery library from:
 * http://www.professorcloud.com/mainsite/cloud-zoom.htm
 */


/**
 * Implementation of hook_requirements().
 */
function cloud_zoom_requirements($phase) {
  if ($phase == 'runtime') {
    $files_present = _cloud_zoom_get_path();

    return array(
      'cloud_zoom_sourcefiles' => array(
        'title' => t('Cloud Zoom - Sourcecode downloaded and present'),
        'value' => $files_present ? t('Files Present') : t('Files Missing'),
        'description' => $files_present ? NULL : t('Have the sourcecode files for Cloud Zoom been downloaded from <a href="http://www.professorcloud.com/mainsite/cloud-zoom.htm">Professor Cloud</a>'),
        'severity' => $files_present ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      ),
    );
  }
}


/**
 * Implements hook_libraries_info().
 */
function cloud_zoom_libraries_info() {
  $libraries['cloud-zoom'] = array(
    'name' => 'Cloud Zoom',
    'vendor url' => 'http://www.professorcloud.com/mainsite/cloud-zoom.htm',
    'download url' => 'http://www.professorcloud.com/downloads/cloud-zoom.1.0.2.zip',
  );
  return $libraries;
}


/**
 * Retrieve the expected path to the example library.
 *
 * @return
 *   The path where the example library is to be expected to be installed.
 *   Returns FALSE if the library is not found.
 */
function _cloud_zoom_get_path() {
  $path = FALSE;

  // Check if the libraries module is installed and if the example library is
  // being supplied through the libraries module.
  if (module_exists('libraries')) {
    // Check if the library is found. If no library is found libraries_get_path()
    // will still return sites/all/libraries as a path.
    $libraries = libraries_get_libraries();
    if (isset($libraries['cloud-zoom'])) {
      $path = libraries_get_path('cloud-zoom');
    }
  }

  // Check in the cloud-zoom directory within the module directory.
  if (!$path) {
    $path = drupal_get_path('module', 'cloud_zoom');
    $path = (file_exists($path .'/cloud-zoom/cloud-zoom.1.0.2.min.js') && file_exists($path .'/cloud-zoom/cloud-zoom.css')) ? drupal_get_path('module', 'cloud_zoom') . '/cloud-zoom' : FALSE;
  }

  // Check if the example library is in the include path.
  if (!$path) {
    $include_paths = explode(PATH_SEPARATOR, get_include_path());
      foreach ($include_paths as $include_path) {
        if (is_dir($include_path .'/example')) {
          $path = $include_path .'/example';
          continue;
        }
      }
  }

  return $path;
}

/**
 * Implementation of hook_field_formatter().
 */
function cloud_zoom_field_formatter_info() {
  $formatters = array();

  // Load the rules and build a "grid" of a->b settings.
  $rules = image_styles();
  foreach ($rules as $outer_preset_id => $outer_preset_info) {
    foreach ($rules as $inner_preset_id => $inner_preset_info) {
      $formatters['image__cloud_zoom__'. $outer_preset_id .'__'. $inner_preset_id] = array(
        'label' => t('Cloud Zoom: !outer -> !inner', array('!outer' => $outer_preset_id, '!inner' => $inner_preset_id)),
        'field types' => array('image'),
      );
    }
  }

  return $formatters;
}


/**
 * Implements hook_field_formatter_view().
 */
function cloud_zoom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a particular image style.
  $matches = array();
  if (preg_match('/__([a-z0-9_]+)/', $display['type'], $matches)) {
    $image_style = $matches[1];
  }

  // Break out the view and zoom presets
  list($tmp, $cloud_zoom_type, $view_preset, $zoom_preset) = explode('__', $display['type'], 4);

  // Build elements for each item
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'cloud_zoom_image',
      '#item' => $item,
      '#view_preset' => $view_preset,
      '#zoom_preset' => $zoom_preset,
    );
  }
  return $element;
}


/**
 * Implementation of hook_theme().
 */
function cloud_zoom_theme() {
  // Define a base theme handler
  return array(
    'cloud_zoom_image' => array(
      'variables' => array('item' => NULL, 'view_preset' => NULL, 'zoom_preset' => NULL),
    ),
  );
}


/**
 * Theme handler for the cloud_zoom effect
 */
function theme_cloud_zoom_image($variables) {
  // Add the cloud zoom JS and CSS
  $path = _cloud_zoom_get_path();
  drupal_add_js($path . '/cloud-zoom.1.0.2.min.js');
  drupal_add_css($path . '/cloud-zoom.css');

  $item = $variables['item'];

  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
    'style_name' => $variables['view_preset'],
  );

  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  // Theme the preview image using an image style
  $small = theme('image_style', $image);

  // Build a Zoomed In URL path
  $zoomed = image_style_url($variables['zoom_preset'], $item['uri']);
  $zoomed = file_create_url($zoomed);

  // Return the preview image as a link to the larger image with a cloud-zoom CSS class
  return l($small, $zoomed, array('html' => TRUE, 'attributes' => array('class' => 'cloud-zoom')));
}
