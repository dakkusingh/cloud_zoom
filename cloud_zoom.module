<?php
// $Id$

/**
 * @file
 * This module integrates the Cloud Zoom JQuery library from:
 * http://www.professorcloud.com/mainsite/cloud-zoom.htm
 */


/**
 * Implementation of hook_help().
 */
function cloud_zoom_help($path, $args) {
  switch ($path) {
    case 'admin/settings/cloudzoom' :
      return t('Available fields are listed below. You can modify the settings for each by clicking edit');
  }
}


/**
 * Implementation of hook_menu().
 */
function cloud_zoom_menu() {
  $items = array();

  $items['admin/settings/cloudzoom'] = array(
    'title' => 'Cloud Zoom',
    'description' => 'Configure the Cloud Zoom field display features',
    'page callback' => 'cloud_zoom_field_admin',
    'file' => 'cloud_zoom.admin.inc',
    'access arguments' => array('configure cloud zoom field display'),
  );

  $items['admin/settings/cloudzoom/%/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_zoom_field_admin_edit_form', 3),
    'file' => 'cloud_zoom.admin.inc',
    'access arguments' => array('configure cloud zoom field display'),
    'type' => MENU_CALLBACK
  );


  return $items;
}


/**
 * Implementation of hook_nodeapi().
 */
function cloud_zoom_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // If we're viewing the node, we set flags on the node to determin if its a full or teaser view
  if ($op == 'view') {
    $node->is_teaser = $a3;  // Teaser arg
    $node->is_page = $a4;    // Page arg
  }
}


/**
 * Implementation of hook_requirements().
 */
function cloud_zoom_requirements($phase) {
  if ($phase == 'runtime') {
    $files_present = _cloud_zoom_files_present();

    return array(
      'cloud_zoom_sourcefiles' => array(
        'title' => t('Cloud Zoom - Sourcecode downloaded and present'),
        'value' => $files_present ? t('Files Present') : t('Files Missing'),
        'description' => $files_present ? NULL : t('Have the sourcecode files for Cloud Zoom been downloaded from <a href="http://www.professorcloud.com/mainsite/cloud-zoom.htm">Professor Cloud</a>'),
        'severity' => $files_present ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      ),
    );
  }
}


/**
 * Internal Helper function to check if the required source code is present
 */
function _cloud_zoom_files_present() {
  $path = drupal_get_path('module', 'cloud_zoom');
  return (file_exists($path .'/cloud-zoom/cloud-zoom.1.0.2.min.js') && file_exists($path .'/cloud-zoom/cloud-zoom.css'));
}


/**
 * Implementation of hook_field_formatter().
 */
function cloud_zoom_field_formatter_info() {
  $formatters = array();

  // Load the rules and build a "grid" of a->b settings.
  $rules = imagecache_presets();
  foreach ($rules as $outer_preset_id => $outer_preset_info) {
    foreach ($rules as $inner_preset_id => $inner_preset_info) {
      $formatters['imagefield__cloud_zoom__'. $outer_preset_info['presetname'] .'__'. $inner_preset_info['presetname']] = array(
        'label' => t('Cloud Zoom: !outer -> !inner', array('!outer' => $outer_preset_info['presetname'], '!inner' => $inner_preset_info['presetname'])),
        'field types' => array('filefield'),
      );
    }
  }

  return $formatters;
}


/**
 * Implementation of hook_theme().
 */
function cloud_zoom_theme() {
  // Define a base theme handler
  $theme = array(
    'cloud_zoom_formatter_imagefield' => array(
      'arguments' => array('element' => NULL),
    ),
  );

  // Load the rules and build a "grid" of a->b settings.
  $rules = imagecache_presets();
  foreach ($rules as $outer_preset_id => $outer_preset_info) {
    foreach ($rules as $inner_preset_id => $inner_preset_info) {
      $theme['cloud_zoom_formatter_imagefield__cloud_zoom__'. $outer_preset_info['presetname'] .'__'. $inner_preset_info['presetname']] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_cloud_zoom_formatter_imagefield',
      );
    }
  }

  return $theme;
}


/**
 * Theme handler for the cloud_zoom effect
 */
function theme_cloud_zoom_formatter_imagefield($element) {
  // If the files aren't present, don't display anything
  if (!_cloud_zoom_files_present()) return;

  // Add the cloud zoom JS and CSS
  drupal_add_js(drupal_get_path('module', 'cloud_zoom') .'/cloud-zoom/cloud-zoom.1.0.2.min.js');
  drupal_add_css(drupal_get_path('module', 'cloud_zoom') .'/cloud-zoom/cloud-zoom.css');

  // Get the view and zoom presets from the formatter ID.
  list($tmp, $cloud_zoom_type, $view_preset, $zoom_preset) = explode('__', $element['#formatter'], 4);

  // Theme the preview image using imagecache
  $small = theme('imagecache', $view_preset, $element['#item']['filepath']);

  // Get the settings to see if there are any non-defaults to apply
  $default_settings = _cloud_zoom_field_default_settings();
  $settings = variable_get('cloud_zoom_field_settings', array());

  // TODO - How shall we handle Views theming the field individually?
  // Define the key based on the "is_teaser" key set in the nodeapi above.
  $view_type = (isset($element['#node']->is_teaser) && $element['#node']->is_teaser) ? 'teaser' : 'full';
  $key = 'node-'. $element['#node']->type .'-'. $element['#field_name'] .'-'. $view_type;

  // Buld the Rel for the link, if there are any settings
  $rel = '';
  if (isset($settings[$key])) {
    $rel = array();
    foreach ($settings[$key] as $option => $val) {
      $val = $default_settings[$option]['quoted'] ? "'{$val}'" : $val;
      $rel[] = "{$option}: {$val}";
    }
    $rel = implode(', ', $rel);
  }


  // Return the preview image as a link to the larger image with a cloud-zoom CSS class
  return l($small, imagecache_create_path($zoom_preset, $element['#item']['filepath']), array('html' => TRUE, 'attributes' => array('class' => 'cloud-zoom', 'rel' => $rel,), ));
}


function _cloud_zoom_field_default_settings() {
  return array(
    'zoomWidth'    => array('default' => 'auto',  'quoted' => TRUE,  'description' => 'The width of the zoom window in pixels. If \'auto\' is specified, the width will be the same as the small image.', ),
    'zoomHeight'   => array('default' => 'auto',  'quoted' => TRUE,  'description' => 'The height of the zoom window in pixels. If \'auto\' is specified, the height will be the same as the small image.', ),
    'position'     => array('default' => 'right', 'quoted' => TRUE,  'description' => 'Specifies the position of the zoom window relative to the small image. Allowable values are \'left\', \'right\', \'top\', \'bottom\', \'inside\' or you can specifiy the id of an html element to place the zoom window in e.g. position: \'element1\'', ),
    'adjustX'      => array('default' => 0,       'quoted' => FALSE, 'description' => 'Allows you to fine tune the x-position of the zoom window in pixels.', ),
    'adjustY'      => array('default' => 0,       'quoted' => FALSE, 'description' => 'Allows you to fine tune the y-position of the zoom window in pixels.', ),
    'tint'         => array('default' => false,   'quoted' => FALSE, 'description' => 'Specifies a tint colour which will cover the small image. Colours should be specified in hex format, e.g. \'#aa00aa\'. Does not work with softFocus.', ),
    'tintOpacity'  => array('default' => 0.5,     'quoted' => FALSE, 'description' => 'Opacity of the tint, where 0 is fully transparent, and 1 is fully opaque.', ),
    'lensOpacity'  => array('default' => 0.5,     'quoted' => FALSE, 'description' => 'Opacity of the lens mouse pointer, where 0 is fully transparent, and 1 is fully opaque. In tint and soft-focus modes, it will always be transparent.', ),
    'softFocus'    => array('default' => false,   'quoted' => FALSE, 'description' => 'Applies a subtle blur effect to the small image. Set to true or false. Does not work with tint.', ),
    'smoothMove'   => array('default' => 3,       'quoted' => FALSE, 'description' => 'Amount of smoothness/drift of the zoom image as it moves. The higher the number, the smoother/more drifty the movement will be. 1 = no smoothing.', ),
    'showTitle'    => array('default' => true,    'quoted' => FALSE, 'description' => 'Shows the title tag of the image. True or false.', ),
    'titleOpacity' => array('default' => 0.5,     'quoted' => FALSE, 'description' => 'Specifies the opacity of the title if displayed, where 0 is fully transparent, and 1 is fully opaque.', ),
  );
}
